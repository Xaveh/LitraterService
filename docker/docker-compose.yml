services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: litrater-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-litrater}
      POSTGRES_USER: ${POSTGRES_USER:-litrater_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-litrater_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - litrater-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-litrater_user} -d ${POSTGRES_DB:-litrater}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Litrater Web Application
  litrater-api:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: litrater-api
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__Database=Host=postgres;Port=5432;Database=litrater;Username=${POSTGRES_USER:-litrater_user};Password=${POSTGRES_PASSWORD:-litrater_password}
      - JwtSettings__SecretKey=${JWT_SECRET_KEY:-your-super-secret-key-change-this-in-production}
      - JwtSettings__Issuer=${JWT_ISSUER:-LitraterAPI}
      - JwtSettings__Audience=${JWT_AUDIENCE:-LitraterUsers}
      - JwtSettings__ExpirationMinutes=${JWT_EXPIRATION_MINUTES:-60}
    ports:
      - "${API_PORT:-5000}:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - litrater-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:

networks:
  litrater-network:
    driver: bridge 